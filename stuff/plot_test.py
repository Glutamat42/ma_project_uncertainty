import argparse
import ast
import json
import math
import multiprocessing
import os
import re
import sys
import time
from collections import OrderedDict
from multiprocessing import Pool
from pathlib import Path

import cv2
import numpy as np
import pandas as pd
import tqdm

import json
import os

import numpy as np
import pandas as pd
from matplotlib import pyplot as plt

from src.utils.evaluation import plots
from src.utils.evaluation.helpers import asImg

import matplotlib.pyplot as plt

from sklearn.datasets import make_classification
from sklearn.datasets import make_blobs
from sklearn.datasets import make_gaussian_quantiles

directory = "/home/markus/latex/ma/assets/generation_folder__copy_it_away"

plt.style.use(['science', 'ieee'])

# ### 3 datasets, 1 possible with linear, the other 2 not
#
#
# X1, Y1 = make_blobs(n_features=2, centers=1)
# X1 = X1-1
# Y1=Y1-1
# X2, Y2 = make_gaussian_quantiles(n_features=2, n_classes=2)
#
# data = json.loads('{"Y1": [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1], "X1": [[-0.2689463165290882, 3.2474741491316834], [-1.2999481785129097, 0.9965041125587382], [-1.7944515807016264, 2.6835565287966263], [-2.0113677484985475, 5.811389875710683], [-1.1045447882918018, 2.9940532254080727], [-0.1988769684431677, 3.0296253766283074], [-1.139907486616966, 2.1600526498370565], [0.13117030201989843, 3.256566104158477], [1.637263543336926, 2.3934839313681353], [0.39828150211274416, 3.0569625340923885], [-3.2334350197871036, 1.3689117923523297], [-0.18868619091887584, 2.6926988781760794], [-0.9428790952446475, 3.2274313017481875], [0.2772708231586296, 3.6998420345945515], [0.31115428183976523, 2.27379433124361], [0.007677785236826384, 3.020038503889377], [0.8692258670476867, 4.544062439452154], [0.2592844484986958, 2.364170604929994], [-1.1710358749005263, 2.0623469179798954], [0.3488713286764338, 5.449756974583234], [-0.3475500868372735, 3.259637030528692], [-0.48112764366577687, 4.358002343270881], [-0.7737956543081156, 3.908167264093457], [-1.057708790966194, 2.114772461243348], [-1.575652823690425, 2.025976761292201], [2.0275435363071073, 2.7922706175306886], [0.080678958918734, 4.882422866721159], [0.05997859664301819, 2.277196267553614], [-1.333638174190138, 4.380781523959794], [-0.8109099948578413, 3.746515633579211], [-0.23567431630769065, 2.403081813957328], [0.3676072176193448, 2.934270225327063], [-2.894264735687622, 2.985966148684972], [-0.3906273718150599, 1.9170951552342608], [-1.0295967866682396, 3.13128010629943], [-0.6998111304010164, 2.904718012151849], [-2.4000401503236883, 1.3928507962013592], [-2.013519731924105, 1.6786932147396243], [-0.36304711960686875, 1.870877463640166], [-0.9371211817433731, 2.738503850937618], [-0.770803732892285, 2.844052872403564], [-1.1292180922611927, 1.7633235199709247], [-1.9456843819269019, 2.8192389347342046], [-1.7936447475584099, 2.897803225903054], [0.9868082937865623, 4.357337975331221], [-1.890505393146157, 2.8908955477381637], [-1.7858528983878188, 3.9304403168565694], [-0.3931062830896219, 3.169547764931653], [0.07357297540846419, 4.537360399743992], [-2.3999250417436517, 4.188775830164557], [1.2452036952332346, 2.403758068231666], [-0.18594631664333228, 2.546934551561526], [-0.8226402198865083, 3.8921070285366755], [0.4021059170238157, 3.2805055113094843], [-3.172812790259228, 4.296855912962881], [0.9615761945127987, 3.484547221054287], [-1.7304638645030368, 1.3811260801429057], [-0.28448649323603603, 2.682221595957717], [-0.1169919261497867, 3.2260880010252997], [-0.8620662198228277, 2.0475564170298695], [-0.23570820455481045, 2.344420540914299], [-1.0611785170986385, 3.6477325109447793], [1.463748490390425, 3.104834062069896], [-1.46931418785762, 2.7134674998951307], [0.4395072985598789, 2.406207690191276], [0.2292347818093039, 3.081047868865241], [-1.1567556983421738, 3.7622154778830144], [-1.6125352981780872, 3.465377192538286], [0.16729555408596708, 3.3046321379057044], [-1.7618484154347758, 3.213573015716385], [-2.534794540806991, 2.972680610255569], [-1.480468077128485, 2.54347970035251], [-2.360137573271899, 0.615768913109743], [-1.1334209296175488, 1.661039370701607], [-1.1112140561531323, 1.8192412467820622], [-1.699483957968646, 4.823670980393004], [-2.6543814001283224, 2.812341036647205], [0.08784044857729345, 3.0389879405006575], [-0.11421457788883149, 3.3140559226772695], [-0.9519518236766173, 2.003626660611836], [-1.2293743535856545, 4.286165201037009], [1.4977033716252741, 3.9923367111933716], [-0.10896957115047035, 1.5345403740732992], [-0.6346643742702016, 3.0087163777693036], [0.16671057578452952, 1.6889697794682617], [-1.2729464263310422, 4.950755455323014], [-0.14125825609304554, 0.688549667650892], [-0.6066112826155489, 3.4659685082167027], [-1.5885601174102926, 2.5210630229859268], [-0.816022805962106, 4.791925113150232], [-0.5321123971869953, 0.5935039190705313], [-1.0425982179806854, 1.73401743917757], [-0.28674101946821473, 3.580313999527066], [0.2832916689428959, 2.0096480834175585], [-2.1150891525041198, 2.930379777520964], [1.5354103442529459, 3.955214082233491], [-0.3106604054484179, 2.852517062346963], [-0.6763480108329378, 2.4915152918260572], [-0.1437600745044434, 5.004640158685129], [-0.16367543658181583, 2.662071865952331]], "Y2": [1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1], "X2": [[-1.5877450570328966, -1.51390852939948], [1.13147484151225, 0.364311401428908], [1.016506480916904, -0.1833819346323999], [-1.0336124510573688, -0.5579871623487423], [0.7334678996359684, 0.07473893538011774], [0.3282796919828217, 0.8546048540576088], [0.9861176909983602, 1.5570483327709415], [-1.6333874691304078, 1.2245207309904276], [0.9739227968650268, 2.1026116139521958], [1.63957585538836, -1.3252215545075938], [0.24842572421427586, 0.4104869903688069], [-1.4704917185087798, 0.09068516078896044], [0.5528861262714363, -0.4639598848760301], [0.05895562102833661, -0.7712512959580619], [-2.368969533441631, -0.653492116678529], [0.1408819889523967, 2.6595140526524257], [-0.19731265038976387, -0.17684725514694843], [0.4949243207054076, 0.24025548392181545], [2.3150940354339413, -0.23479864454996727], [1.362432443833366, -0.48572610464613086], [1.0062688970042972, 0.6308929547375436], [-0.3015907735255826, 1.5165318228867464], [-1.0758737343002949, -0.31916553540299725], [2.0992139963123746, 0.2621071390478001], [0.8227225173917472, 1.9905102033333184], [0.336828381130609, -1.406362356760824], [-0.6528538032801076, -0.7426742082517873], [2.310919279451978, 0.2999075602903853], [-0.5049706350004433, 1.03122587295113], [0.18243687432569197, -1.0965204220961637], [-0.4158665480263395, -1.4674301952004263], [0.7662580738256891, 0.5101050785445607], [-1.5818880241486215, -0.9204372960379432], [-0.40160370334995615, -0.24144974642480646], [1.3749008103066345, -0.8665826945299272], [0.051619034932520916, 0.3464617556526709], [0.42041916070494684, -0.30396867556336504], [0.3272874019044692, 1.1890393357705387], [0.41243078144949563, 1.762618952383112], [1.246133197420118, -0.7398279367492279], [-0.44068632632094074, -1.070507117633247], [-0.24311689015637458, 0.7484085534079941], [1.8530830546064392, 2.4220809176481986], [-0.05738790701695296, -0.49239239366959825], [0.6282518816905022, 0.6133121750837942], [-2.5329252006287977, -0.733236757223906], [-1.0133908125517308, 1.4439883850143305], [0.40218072338949695, -0.3041851937704415], [0.7085397478738004, -1.351761815106697], [0.323433635214239, -1.0724740839151619], [1.0066958514654456, -1.15465384100228], [0.15261205620801413, 0.902276452156322], [0.10646388893286417, 0.08428025477928348], [1.118757282073085, 0.240588931693754], [-0.5300365449288323, -0.4904628387164457], [-0.023098015160530026, -0.037575019653007], [-0.8390328326878022, -0.1848670063525778], [-0.5874739505282333, -0.6022514974915578], [-0.1765573945061107, 0.1734808786759555], [-1.1156732200191322, 0.1897379751007435], [0.24962618733886485, 0.5033487797001288], [-0.3112026938732936, -0.4378730281072121], [0.17391162940518423, 1.406405632697264], [-0.6840673035361434, -0.1301225664050035], [-0.27637844947704754, -1.8573734571303477], [-1.5170308615000685, 0.6653030090455819], [0.8091665647323203, 1.227808405967053], [0.17245167814959966, 1.080295515293297], [1.182439363285541, -0.9287055811564844], [0.08013655595173579, -0.5366720698552475], [0.015358516672806972, -0.838913895601738], [-0.22796762860421826, 0.8975446652874701], [1.68942339707367, -0.5913949920171471], [-2.7693883428819204, -0.09258929723614763], [1.3531094158643364, -0.464519257735945], [0.31086470878119066, -1.2718287946825038], [-0.6745848790603258, 1.8724462104303847], [-0.9950906898484545, -2.4830330434683834], [1.0352812646442782, -0.30739493741099727], [0.7586546298181118, -0.4974591710049891], [-0.2248191657461007, -2.1199158053042138], [0.12271527752229608, 0.8703181220969964], [-0.7361473427058813, 0.10358237147994685], [-0.6889836364480815, -0.7168394704167007], [0.6880171841752752, -0.5973912889143703], [-0.0756232393666783, 0.3833321810638239], [-0.4162185927621012, 1.6174146875025035], [1.1286985873963702, -0.5645134130927175], [0.4785116814692607, 0.6363393265650333], [0.49659021272859244, -0.2599211141789922], [2.4722842632800135, -0.971079129843959], [-0.16677015292666425, -0.20549421651148514], [1.6751485945596198, 1.6977999736590361], [2.9201745680993043, 0.07784475834986676], [0.6947871253287514, 0.33711059469416627], [1.4489570477401859, -0.9500555730683342], [-0.1641751667733893, 0.004689669710647785], [0.5818379629564225, 0.9439928234323286], [2.0617407312105285, -0.8226463738653726], [-2.6331713387764584, -0.3014630937129883]]}')
# X1 = np.array(data['X1'])
# Y1 = np.array(data['Y1'])
# X2 = np.array(data['X2'])
# Y2 = np.array(data['Y2'])
# X1[:,1] = X1[:,1]+2
#
# plt.figure(figsize=(3,3))
#
# plt.scatter([], [])
# # plt.scatter(X1[:, 0], X1[:, 1], marker="o", s=25, edgecolor="k", color='red')
# plt.scatter(X1[:, 0], X1[:, 1], marker="o", s=20, edgecolor="k")
# # plt.scatter(X2[:, 0], X2[:, 1], marker="o", c=Y2, s=25, edgecolor="k")
# plt.scatter(X2[:, 0][Y2 == 0], X2[:, 1][Y2 == 0], marker="o", s=20, edgecolor="k")
# plt.scatter(X2[:, 0][Y2 == 1], X2[:, 1][Y2 == 1], marker="o", s=20, edgecolor="k")
#
# # plt.plot([-3.5, 3.2], [0.5, 4.6], color='b', linestyle='-', linewidth=2)
# plt.plot([-3.5, 3.2], [0.5, 4.6], linestyle='-', linewidth=2)
#
# plt.xlim(left=-3.5, right=3.2)
#
# print(json.dumps({'Y1': Y1.tolist(), 'X1': X1.tolist(), 'Y2': Y2.tolist(), 'X2': X2.tolist()}))
#
# plt.tight_layout()
#
# plt.xlabel("$x_1$")
# plt.ylabel('$x_2$')
#
# # img = asImg(None)
#
#
# filename = f"perceptron_problem"
# Path(directory).mkdir(exist_ok=True)
# # img.save(os.path.join(directory, filename) + ".png", "PNG", quality=95, optimize=True)
#
# plt.savefig(os.path.join(directory, filename) + ".png")
# plt.close()

# ### activation functions
#
#
# def calc_sigmoid(x):
#     a = []
#     for item in x:
#         a.append(1 / (1 + math.exp(-item)))
#     return a
#
#
# def calc_relu(x):
#     return np.clip(x, 0, np.inf)
#
#
# def calc_elu(x, alpha=1):
#     return [a if a >= 0 else alpha * np.power(math.e, a) - 1 for a in x]
#
# def calc_lrelu(x, alpha=0.1):
#     return [a if a >= 0 else alpha * a for a in x]
#
# x_res = 0.1
#
# fig, ax = plt.subplots(nrows=3, ncols=1, figsize=(2, 6))
# fig.tight_layout()
# fig.subplots_adjust(hspace=0.55, top=0.95)
#
# x_min = -5
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# sig = calc_sigmoid(x)
# ax[0].plot(x, sig)
# ax[0].set_title("sigmoid")
# ax[0].grid(visible=True)
# ax[0].set_xlim(left=min(x), right=max(x))
# ax[0].set_ylim(bottom=0, top=1)
# ax[0].set_xlabel("x", labelpad=1, )
# ax[0].set_ylabel("y", labelpad=2, )
# ax[0].set_yticks([1.0, 0.5, 0.0])
#
# x_min = -3
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# relu = calc_relu(x)
# ax[1].plot(x, relu)
# ax[1].set_title("ReLU")
# ax[1].grid(visible=True)
# ax[1].set_xlim(left=min(x), right=max(x))
# ax[1].set_xlabel("x", labelpad=1, )
# ax[1].set_ylabel("y", labelpad=10, )
# ax[1].set_xticks([-3, 0, 3])
#
# x_min = -3
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# elu = calc_elu(x)
# lrelu = calc_lrelu(x)
# ax[2].plot(x, lrelu, label="leaky ReLU", linewidth=1.5)
# ax[2].plot(x, elu, linestyle=(0, (3, 3)), linewidth=2, color="red", label="ELU")
# ax[2].set_title("ELU and leaky ReLU")
# ax[2].grid(visible=True)
# ax[2].set_xlim(left=min(x), right=max(x))
# ax[2].set_xlabel("x", labelpad=1, )
# ax[2].set_ylabel("y", labelpad=2, )
# ax[2].set_xticks([-3, 0, 3])
# ax[2].set_yticks([-1, 0, 1, 2, 3])
# ax[2].legend()
#
# # plt.show()
# # sys.exit(0)
#
# img = asImg(None)
# plt.close()
#
# filename = f"activation_functions"
# Path(directory).mkdir(exist_ok=True)
# img.save(os.path.join(directory, filename) + ".png", "PNG", quality=95, optimize=True)
#
#
# ######## same but horizontal
# x_res = 0.1
#
# fig, ax = plt.subplots(nrows=1, ncols=4, figsize=(7.5, 1.75))
# fig.tight_layout()
# # fig.subplots_adjust(hspace=0.55, top=0.95)
# fig.subplots_adjust(wspace=0.3, top=0.92)
#
#
# x_min = -5
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# sig = calc_sigmoid(x)
# ax[0].plot(x, sig)
# ax[0].set_title("sigmoid")
# ax[0].grid(visible=True)
# ax[0].set_xlim(left=min(x), right=max(x))
# ax[0].set_ylim(bottom=0, top=1)
# ax[0].set_xlabel("x", labelpad=1, )
# ax[0].set_ylabel("y", labelpad=2, )
# ax[0].set_yticks([1.0, 0.5, 0.0])
#
# x_min = -3
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# relu = calc_relu(x)
# ax[1].plot(x, relu)
# ax[1].set_title("ReLU")
# ax[1].grid(visible=True)
# ax[1].set_xlim(left=min(x), right=max(x))
# ax[1].set_xlabel("x", labelpad=1, )
# ax[1].set_ylabel("y", labelpad=10, )
# ax[1].set_xticks([-3, 0, 3])
#
# x_min = -3
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# elu = calc_elu(x)
# lrelu = calc_lrelu(x)
# ax[2].plot(x, lrelu, label="leaky ReLU")
# ax[2].set_title("leaky ReLU")
# ax[2].grid(visible=True)
# ax[2].set_xlim(left=min(x), right=max(x))
# ax[2].set_xlabel("x", labelpad=1, )
# ax[2].set_ylabel("y", labelpad=2, )
# ax[2].set_xticks([-3, 0, 3])
# ax[2].set_yticks([-1, 0, 1, 2, 3])
#
# x_min = -3
# x_max = abs(x_min)
# x = np.arange(x_min, x_max + x_res, x_res)
# elu = calc_elu(x)
# lrelu = calc_lrelu(x)
# ax[3].plot(x, elu, label="ELU")
# ax[3].set_title("ELU")
# ax[3].grid(visible=True)
# ax[3].set_xlim(left=min(x), right=max(x))
# ax[3].set_xlabel("x", labelpad=1, )
# ax[3].set_ylabel("y", labelpad=2, )
# ax[3].set_xticks([-3, 0, 3])
# ax[3].set_yticks([-1, 0, 1, 2, 3])
#
# # plt.show()
# # sys.exit(0)
#
# img = asImg(None)
# plt.close()
#
# filename = f"activation_functions_h"
# Path(directory).mkdir(exist_ok=True)
# img.save(os.path.join(directory, filename) + ".png", "PNG", quality=95, optimize=True)
#


# # bbb blundell train_loss
# df = pd.read_csv(
#     "/home/markus/workspace/data/final_data/wandb_export_2022-06-15T01 55 08.643+02 00_bbb_blundell_train_loss_supervised_mean_std.csv")
# # x_label = [x for x in range(0, 25)]
# x_label = [round(x / 266) for x in df["Step"]]
#
# plt.plot(df["Step"], df["tags: final,bbb_supervised_head_paperproposal4 - train_loss"], label="mean loss")
# plt.fill_between(df["Step"], df["tags: final,bbb_supervised_head_paperproposal4 - train_loss__MIN"],
#                  df["tags: final,bbb_supervised_head_paperproposal4 - train_loss__MAX"], alpha=0.3, label=r'$\pm 1*\sigma$')
# # plt.fill_between(df["Step"], means - stds * 2, means + stds * 2, alpha=0.15, color='k', label=r'$\pm 2*\sigma$')
#
# plt.yscale('log')
# # plt.gca().set_xticklabels(x_label)
# plt.xticks([x * 266 - 266 for x in [1, 5, 10, 15, 20, 25]], [1, 5, 10, 15, 20, 25])
# plt.xlim(left=0, right=len(df["Step"]))
# plt.ylim(top=5 * max(df["tags: final,bbb_supervised_head_paperproposal4 - train_loss"]))
#
# plt.xlabel("Epoch")
# plt.ylabel("BBB loss")
#
# plt.gca().set_aspect(1. / plt.gca().get_data_ratio())
#
# # plt.legend()
#
# # plt.show()
#
# img = asImg(None)
# plt.close()
#
# filename = f"bbb_blundell_train_loss_supervised_mean_std"
# Path(directory).mkdir(exist_ok=True)
# img.save(os.path.join(directory, filename) + ".png", "PNG", quality=95, optimize=True)

df = pd.read_csv("/home/markus/workspace/data/final_data/other_data/mcbn_evaluation_with_dataset_4_5k/1645844753_1645844808predictions.csv.gz")

plots.plot_mse_over_angles(df)
# plt.show()
plt.savefig(os.path.join(directory, "mse_over_angles") + ".png")
plt.close()
plots.plot_avg_prediction_over_angles(df)
# plt.show()
plt.savefig(os.path.join(directory, "avg_prediction_over_angles") + ".png")
plt.close()
plots.plot_avg_prediction_over_angles_scatter(df)
plt.savefig(os.path.join(directory, "avg_prediction_over_angles_scatter") + ".png")
# plt.show()
plt.close()


print("hi")
